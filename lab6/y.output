State 82 conflicts: 16 shift/reduce
State 88 conflicts: 1 shift/reduce


Grammar

    0 $accept: top $end

    1 top: /* empty */
    2    | function top

    3 function: func_signature '{' func_body '}'

    4 func_signature: type ID '(' args ')'

    5 func_body: declaration
    6          | statement

    7 func_call: ID '(' args ')'

    8 declaration: type ID ';'
    9            | type MUL ID
   10            | type ID '[' INTVAL ']'

   11 statement: ID SET expr ';'
   12          | '{' stmnts '}'
   13          | RETURN expr ';'
   14          | func_call ';'
   15          | IF '(' expr ')' statement ELSE statement
   16          | IF '(' expr ')' statement
   17          | WHILE '(' expr ')' statement

   18 args: /* empty */
   19     | expr
   20     | expr ',' args

   21 stmnts: statement
   22       | statement stmnts

   23 expr: INTVAL
   24     | STRVAL
   25     | CHARVAL
   26     | FLTVAL
   27     | DBLVAL
   28     | expr op expr
   29     | func_call
   30     | ID
   31     | MUL ID
   32     | ID '[' INTVAL ']'

   33 type: VOID
   34     | CHAR
   35     | SHORT
   36     | INT
   37     | LONG
   38     | FLOAT
   39     | DOUBLE

   40 op: EQ
   41   | NE
   42   | GT
   43   | LT
   44   | LE
   45   | GE
   46   | ADD
   47   | SUB
   48   | MUL
   49   | DIV
   50   | MOD
   51   | LSH
   52   | RSH
   53   | BITAND
   54   | BITOR
   55   | BITXOR


Terminals, with rules where they appear

$end (0) 0
'(' (40) 4 7 15 16 17
')' (41) 4 7 15 16 17
',' (44) 20
';' (59) 8 11 13 14
'[' (91) 10 32
']' (93) 10 32
'{' (123) 3 12
'}' (125) 3 12
error (256)
ID (258) 4 7 8 9 10 11 30 31 32
INTVAL (259) 10 23 32
STRVAL (260) 24
CHARVAL (261) 25
DBLVAL (262) 27
FLTVAL (263) 26
EQ (264) 40
NE (265) 41
GE (266) 45
LE (267) 44
GT (268) 42
LT (269) 43
ADD (270) 46
SUB (271) 47
MUL (272) 9 31 48
DIV (273) 49
MOD (274) 50
BITOR (275) 54
BITAND (276) 53
BITXOR (277) 55
LSH (278) 51
RSH (279) 52
SET (280) 11
RETURN (281) 13
IF (282) 15 16
ELSE (283) 15
WHILE (284) 17
VOID (285) 33
CHAR (286) 34
SHORT (287) 35
INT (288) 36
LONG (289) 37
FLOAT (290) 38
DOUBLE (291) 39


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
top (46)
    on left: 1 2, on right: 0 2
function (47)
    on left: 3, on right: 2
func_signature (48)
    on left: 4, on right: 3
func_body (49)
    on left: 5 6, on right: 3
func_call (50)
    on left: 7, on right: 14 29
declaration (51)
    on left: 8 9 10, on right: 5
statement (52)
    on left: 11 12 13 14 15 16 17, on right: 6 15 16 17 21 22
args (53)
    on left: 18 19 20, on right: 4 7 20
stmnts (54)
    on left: 21 22, on right: 12 22
expr (55)
    on left: 23 24 25 26 27 28 29 30 31 32, on right: 11 13 15 16 17
    19 20 28
type (56)
    on left: 33 34 35 36 37 38 39, on right: 4 8 9 10
op (57)
    on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55,
    on right: 28


state 0

    0 $accept: . top $end

    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7

    $default  reduce using rule 1 (top)

    top             go to state 8
    function        go to state 9
    func_signature  go to state 10
    type            go to state 11


state 1

   33 type: VOID .

    $default  reduce using rule 33 (type)


state 2

   34 type: CHAR .

    $default  reduce using rule 34 (type)


state 3

   35 type: SHORT .

    $default  reduce using rule 35 (type)


state 4

   36 type: INT .

    $default  reduce using rule 36 (type)


state 5

   37 type: LONG .

    $default  reduce using rule 37 (type)


state 6

   38 type: FLOAT .

    $default  reduce using rule 38 (type)


state 7

   39 type: DOUBLE .

    $default  reduce using rule 39 (type)


state 8

    0 $accept: top . $end

    $end  shift, and go to state 12


state 9

    2 top: function . top

    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7

    $default  reduce using rule 1 (top)

    top             go to state 13
    function        go to state 9
    func_signature  go to state 10
    type            go to state 11


state 10

    3 function: func_signature . '{' func_body '}'

    '{'  shift, and go to state 14


state 11

    4 func_signature: type . ID '(' args ')'

    ID  shift, and go to state 15


state 12

    0 $accept: top $end .

    $default  accept


state 13

    2 top: function top .

    $default  reduce using rule 2 (top)


state 14

    3 function: func_signature '{' . func_body '}'

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    VOID    shift, and go to state 1
    CHAR    shift, and go to state 2
    SHORT   shift, and go to state 3
    INT     shift, and go to state 4
    LONG    shift, and go to state 5
    FLOAT   shift, and go to state 6
    DOUBLE  shift, and go to state 7
    '{'     shift, and go to state 20

    func_body    go to state 21
    func_call    go to state 22
    declaration  go to state 23
    statement    go to state 24
    type         go to state 25


state 15

    4 func_signature: type ID . '(' args ')'

    '('  shift, and go to state 26


state 16

    7 func_call: ID . '(' args ')'
   11 statement: ID . SET expr ';'

    SET  shift, and go to state 27
    '('  shift, and go to state 28


state 17

   13 statement: RETURN . expr ';'

    ID       shift, and go to state 29
    INTVAL   shift, and go to state 30
    STRVAL   shift, and go to state 31
    CHARVAL  shift, and go to state 32
    DBLVAL   shift, and go to state 33
    FLTVAL   shift, and go to state 34
    MUL      shift, and go to state 35

    func_call  go to state 36
    expr       go to state 37


state 18

   15 statement: IF . '(' expr ')' statement ELSE statement
   16          | IF . '(' expr ')' statement

    '('  shift, and go to state 38


state 19

   17 statement: WHILE . '(' expr ')' statement

    '('  shift, and go to state 39


state 20

   12 statement: '{' . stmnts '}'

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    '{'     shift, and go to state 20

    func_call  go to state 22
    statement  go to state 40
    stmnts     go to state 41


state 21

    3 function: func_signature '{' func_body . '}'

    '}'  shift, and go to state 42


state 22

   14 statement: func_call . ';'

    ';'  shift, and go to state 43


state 23

    5 func_body: declaration .

    $default  reduce using rule 5 (func_body)


state 24

    6 func_body: statement .

    $default  reduce using rule 6 (func_body)


state 25

    8 declaration: type . ID ';'
    9            | type . MUL ID
   10            | type . ID '[' INTVAL ']'

    ID   shift, and go to state 44
    MUL  shift, and go to state 45


state 26

    4 func_signature: type ID '(' . args ')'

    ID       shift, and go to state 29
    INTVAL   shift, and go to state 30
    STRVAL   shift, and go to state 31
    CHARVAL  shift, and go to state 32
    DBLVAL   shift, and go to state 33
    FLTVAL   shift, and go to state 34
    MUL      shift, and go to state 35

    $default  reduce using rule 18 (args)

    func_call  go to state 36
    args       go to state 46
    expr       go to state 47


state 27

   11 statement: ID SET . expr ';'

    ID       shift, and go to state 29
    INTVAL   shift, and go to state 30
    STRVAL   shift, and go to state 31
    CHARVAL  shift, and go to state 32
    DBLVAL   shift, and go to state 33
    FLTVAL   shift, and go to state 34
    MUL      shift, and go to state 35

    func_call  go to state 36
    expr       go to state 48


state 28

    7 func_call: ID '(' . args ')'

    ID       shift, and go to state 29
    INTVAL   shift, and go to state 30
    STRVAL   shift, and go to state 31
    CHARVAL  shift, and go to state 32
    DBLVAL   shift, and go to state 33
    FLTVAL   shift, and go to state 34
    MUL      shift, and go to state 35

    $default  reduce using rule 18 (args)

    func_call  go to state 36
    args       go to state 49
    expr       go to state 47


state 29

    7 func_call: ID . '(' args ')'
   30 expr: ID .
   32     | ID . '[' INTVAL ']'

    '('  shift, and go to state 28
    '['  shift, and go to state 50

    $default  reduce using rule 30 (expr)


state 30

   23 expr: INTVAL .

    $default  reduce using rule 23 (expr)


state 31

   24 expr: STRVAL .

    $default  reduce using rule 24 (expr)


state 32

   25 expr: CHARVAL .

    $default  reduce using rule 25 (expr)


state 33

   27 expr: DBLVAL .

    $default  reduce using rule 27 (expr)


state 34

   26 expr: FLTVAL .

    $default  reduce using rule 26 (expr)


state 35

   31 expr: MUL . ID

    ID  shift, and go to state 51


state 36

   29 expr: func_call .

    $default  reduce using rule 29 (expr)


state 37

   13 statement: RETURN expr . ';'
   28 expr: expr . op expr

    EQ      shift, and go to state 52
    NE      shift, and go to state 53
    GE      shift, and go to state 54
    LE      shift, and go to state 55
    GT      shift, and go to state 56
    LT      shift, and go to state 57
    ADD     shift, and go to state 58
    SUB     shift, and go to state 59
    MUL     shift, and go to state 60
    DIV     shift, and go to state 61
    MOD     shift, and go to state 62
    BITOR   shift, and go to state 63
    BITAND  shift, and go to state 64
    BITXOR  shift, and go to state 65
    LSH     shift, and go to state 66
    RSH     shift, and go to state 67
    ';'     shift, and go to state 68

    op  go to state 69


state 38

   15 statement: IF '(' . expr ')' statement ELSE statement
   16          | IF '(' . expr ')' statement

    ID       shift, and go to state 29
    INTVAL   shift, and go to state 30
    STRVAL   shift, and go to state 31
    CHARVAL  shift, and go to state 32
    DBLVAL   shift, and go to state 33
    FLTVAL   shift, and go to state 34
    MUL      shift, and go to state 35

    func_call  go to state 36
    expr       go to state 70


state 39

   17 statement: WHILE '(' . expr ')' statement

    ID       shift, and go to state 29
    INTVAL   shift, and go to state 30
    STRVAL   shift, and go to state 31
    CHARVAL  shift, and go to state 32
    DBLVAL   shift, and go to state 33
    FLTVAL   shift, and go to state 34
    MUL      shift, and go to state 35

    func_call  go to state 36
    expr       go to state 71


state 40

   21 stmnts: statement .
   22       | statement . stmnts

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    '{'     shift, and go to state 20

    $default  reduce using rule 21 (stmnts)

    func_call  go to state 22
    statement  go to state 40
    stmnts     go to state 72


state 41

   12 statement: '{' stmnts . '}'

    '}'  shift, and go to state 73


state 42

    3 function: func_signature '{' func_body '}' .

    $default  reduce using rule 3 (function)


state 43

   14 statement: func_call ';' .

    $default  reduce using rule 14 (statement)


state 44

    8 declaration: type ID . ';'
   10            | type ID . '[' INTVAL ']'

    ';'  shift, and go to state 74
    '['  shift, and go to state 75


state 45

    9 declaration: type MUL . ID

    ID  shift, and go to state 76


state 46

    4 func_signature: type ID '(' args . ')'

    ')'  shift, and go to state 77


state 47

   19 args: expr .
   20     | expr . ',' args
   28 expr: expr . op expr

    EQ      shift, and go to state 52
    NE      shift, and go to state 53
    GE      shift, and go to state 54
    LE      shift, and go to state 55
    GT      shift, and go to state 56
    LT      shift, and go to state 57
    ADD     shift, and go to state 58
    SUB     shift, and go to state 59
    MUL     shift, and go to state 60
    DIV     shift, and go to state 61
    MOD     shift, and go to state 62
    BITOR   shift, and go to state 63
    BITAND  shift, and go to state 64
    BITXOR  shift, and go to state 65
    LSH     shift, and go to state 66
    RSH     shift, and go to state 67
    ','     shift, and go to state 78

    $default  reduce using rule 19 (args)

    op  go to state 69


state 48

   11 statement: ID SET expr . ';'
   28 expr: expr . op expr

    EQ      shift, and go to state 52
    NE      shift, and go to state 53
    GE      shift, and go to state 54
    LE      shift, and go to state 55
    GT      shift, and go to state 56
    LT      shift, and go to state 57
    ADD     shift, and go to state 58
    SUB     shift, and go to state 59
    MUL     shift, and go to state 60
    DIV     shift, and go to state 61
    MOD     shift, and go to state 62
    BITOR   shift, and go to state 63
    BITAND  shift, and go to state 64
    BITXOR  shift, and go to state 65
    LSH     shift, and go to state 66
    RSH     shift, and go to state 67
    ';'     shift, and go to state 79

    op  go to state 69


state 49

    7 func_call: ID '(' args . ')'

    ')'  shift, and go to state 80


state 50

   32 expr: ID '[' . INTVAL ']'

    INTVAL  shift, and go to state 81


state 51

   31 expr: MUL ID .

    $default  reduce using rule 31 (expr)


state 52

   40 op: EQ .

    $default  reduce using rule 40 (op)


state 53

   41 op: NE .

    $default  reduce using rule 41 (op)


state 54

   45 op: GE .

    $default  reduce using rule 45 (op)


state 55

   44 op: LE .

    $default  reduce using rule 44 (op)


state 56

   42 op: GT .

    $default  reduce using rule 42 (op)


state 57

   43 op: LT .

    $default  reduce using rule 43 (op)


state 58

   46 op: ADD .

    $default  reduce using rule 46 (op)


state 59

   47 op: SUB .

    $default  reduce using rule 47 (op)


state 60

   48 op: MUL .

    $default  reduce using rule 48 (op)


state 61

   49 op: DIV .

    $default  reduce using rule 49 (op)


state 62

   50 op: MOD .

    $default  reduce using rule 50 (op)


state 63

   54 op: BITOR .

    $default  reduce using rule 54 (op)


state 64

   53 op: BITAND .

    $default  reduce using rule 53 (op)


state 65

   55 op: BITXOR .

    $default  reduce using rule 55 (op)


state 66

   51 op: LSH .

    $default  reduce using rule 51 (op)


state 67

   52 op: RSH .

    $default  reduce using rule 52 (op)


state 68

   13 statement: RETURN expr ';' .

    $default  reduce using rule 13 (statement)


state 69

   28 expr: expr op . expr

    ID       shift, and go to state 29
    INTVAL   shift, and go to state 30
    STRVAL   shift, and go to state 31
    CHARVAL  shift, and go to state 32
    DBLVAL   shift, and go to state 33
    FLTVAL   shift, and go to state 34
    MUL      shift, and go to state 35

    func_call  go to state 36
    expr       go to state 82


state 70

   15 statement: IF '(' expr . ')' statement ELSE statement
   16          | IF '(' expr . ')' statement
   28 expr: expr . op expr

    EQ      shift, and go to state 52
    NE      shift, and go to state 53
    GE      shift, and go to state 54
    LE      shift, and go to state 55
    GT      shift, and go to state 56
    LT      shift, and go to state 57
    ADD     shift, and go to state 58
    SUB     shift, and go to state 59
    MUL     shift, and go to state 60
    DIV     shift, and go to state 61
    MOD     shift, and go to state 62
    BITOR   shift, and go to state 63
    BITAND  shift, and go to state 64
    BITXOR  shift, and go to state 65
    LSH     shift, and go to state 66
    RSH     shift, and go to state 67
    ')'     shift, and go to state 83

    op  go to state 69


state 71

   17 statement: WHILE '(' expr . ')' statement
   28 expr: expr . op expr

    EQ      shift, and go to state 52
    NE      shift, and go to state 53
    GE      shift, and go to state 54
    LE      shift, and go to state 55
    GT      shift, and go to state 56
    LT      shift, and go to state 57
    ADD     shift, and go to state 58
    SUB     shift, and go to state 59
    MUL     shift, and go to state 60
    DIV     shift, and go to state 61
    MOD     shift, and go to state 62
    BITOR   shift, and go to state 63
    BITAND  shift, and go to state 64
    BITXOR  shift, and go to state 65
    LSH     shift, and go to state 66
    RSH     shift, and go to state 67
    ')'     shift, and go to state 84

    op  go to state 69


state 72

   22 stmnts: statement stmnts .

    $default  reduce using rule 22 (stmnts)


state 73

   12 statement: '{' stmnts '}' .

    $default  reduce using rule 12 (statement)


state 74

    8 declaration: type ID ';' .

    $default  reduce using rule 8 (declaration)


state 75

   10 declaration: type ID '[' . INTVAL ']'

    INTVAL  shift, and go to state 85


state 76

    9 declaration: type MUL ID .

    $default  reduce using rule 9 (declaration)


state 77

    4 func_signature: type ID '(' args ')' .

    $default  reduce using rule 4 (func_signature)


state 78

   20 args: expr ',' . args

    ID       shift, and go to state 29
    INTVAL   shift, and go to state 30
    STRVAL   shift, and go to state 31
    CHARVAL  shift, and go to state 32
    DBLVAL   shift, and go to state 33
    FLTVAL   shift, and go to state 34
    MUL      shift, and go to state 35

    $default  reduce using rule 18 (args)

    func_call  go to state 36
    args       go to state 86
    expr       go to state 47


state 79

   11 statement: ID SET expr ';' .

    $default  reduce using rule 11 (statement)


state 80

    7 func_call: ID '(' args ')' .

    $default  reduce using rule 7 (func_call)


state 81

   32 expr: ID '[' INTVAL . ']'

    ']'  shift, and go to state 87


state 82

   28 expr: expr . op expr
   28     | expr op expr .

    EQ      shift, and go to state 52
    NE      shift, and go to state 53
    GE      shift, and go to state 54
    LE      shift, and go to state 55
    GT      shift, and go to state 56
    LT      shift, and go to state 57
    ADD     shift, and go to state 58
    SUB     shift, and go to state 59
    MUL     shift, and go to state 60
    DIV     shift, and go to state 61
    MOD     shift, and go to state 62
    BITOR   shift, and go to state 63
    BITAND  shift, and go to state 64
    BITXOR  shift, and go to state 65
    LSH     shift, and go to state 66
    RSH     shift, and go to state 67

    EQ        [reduce using rule 28 (expr)]
    NE        [reduce using rule 28 (expr)]
    GE        [reduce using rule 28 (expr)]
    LE        [reduce using rule 28 (expr)]
    GT        [reduce using rule 28 (expr)]
    LT        [reduce using rule 28 (expr)]
    ADD       [reduce using rule 28 (expr)]
    SUB       [reduce using rule 28 (expr)]
    MUL       [reduce using rule 28 (expr)]
    DIV       [reduce using rule 28 (expr)]
    MOD       [reduce using rule 28 (expr)]
    BITOR     [reduce using rule 28 (expr)]
    BITAND    [reduce using rule 28 (expr)]
    BITXOR    [reduce using rule 28 (expr)]
    LSH       [reduce using rule 28 (expr)]
    RSH       [reduce using rule 28 (expr)]
    $default  reduce using rule 28 (expr)

    op  go to state 69


state 83

   15 statement: IF '(' expr ')' . statement ELSE statement
   16          | IF '(' expr ')' . statement

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    '{'     shift, and go to state 20

    func_call  go to state 22
    statement  go to state 88


state 84

   17 statement: WHILE '(' expr ')' . statement

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    '{'     shift, and go to state 20

    func_call  go to state 22
    statement  go to state 89


state 85

   10 declaration: type ID '[' INTVAL . ']'

    ']'  shift, and go to state 90


state 86

   20 args: expr ',' args .

    $default  reduce using rule 20 (args)


state 87

   32 expr: ID '[' INTVAL ']' .

    $default  reduce using rule 32 (expr)


state 88

   15 statement: IF '(' expr ')' statement . ELSE statement
   16          | IF '(' expr ')' statement .

    ELSE  shift, and go to state 91

    ELSE      [reduce using rule 16 (statement)]
    $default  reduce using rule 16 (statement)


state 89

   17 statement: WHILE '(' expr ')' statement .

    $default  reduce using rule 17 (statement)


state 90

   10 declaration: type ID '[' INTVAL ']' .

    $default  reduce using rule 10 (declaration)


state 91

   15 statement: IF '(' expr ')' statement ELSE . statement

    ID      shift, and go to state 16
    RETURN  shift, and go to state 17
    IF      shift, and go to state 18
    WHILE   shift, and go to state 19
    '{'     shift, and go to state 20

    func_call  go to state 22
    statement  go to state 92


state 92

   15 statement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 15 (statement)
